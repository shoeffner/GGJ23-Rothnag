//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Input/RothnagInputActionAsset.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @RothnagInputActionAsset : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @RothnagInputActionAsset()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""RothnagInputActionAsset"",
    ""maps"": [
        {
            ""name"": ""CharacterActionMap"",
            ""id"": ""15c3f0da-870d-486f-bd1e-a217cec8b51e"",
            ""actions"": [
                {
                    ""name"": ""Walk"",
                    ""type"": ""PassThrough"",
                    ""id"": ""3c270217-aa5a-4519-817b-5468a0bee1a5"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""6cb64422-4ed2-40fc-9ec0-f49c55391b50"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""c7987e82-c43c-4bd1-8599-fcb447aaf2b0"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""6f3598b0-a7c7-4103-9033-28062e4beded"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""1c010714-fb72-4dc3-8668-17dc8c56a072"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""fdccf354-4bf1-47ac-81ba-9b782ab6aa0a"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // CharacterActionMap
        m_CharacterActionMap = asset.FindActionMap("CharacterActionMap", throwIfNotFound: true);
        m_CharacterActionMap_Walk = m_CharacterActionMap.FindAction("Walk", throwIfNotFound: true);
        m_CharacterActionMap_Jump = m_CharacterActionMap.FindAction("Jump", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // CharacterActionMap
    private readonly InputActionMap m_CharacterActionMap;
    private ICharacterActionMapActions m_CharacterActionMapActionsCallbackInterface;
    private readonly InputAction m_CharacterActionMap_Walk;
    private readonly InputAction m_CharacterActionMap_Jump;
    public struct CharacterActionMapActions
    {
        private @RothnagInputActionAsset m_Wrapper;
        public CharacterActionMapActions(@RothnagInputActionAsset wrapper) { m_Wrapper = wrapper; }
        public InputAction @Walk => m_Wrapper.m_CharacterActionMap_Walk;
        public InputAction @Jump => m_Wrapper.m_CharacterActionMap_Jump;
        public InputActionMap Get() { return m_Wrapper.m_CharacterActionMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CharacterActionMapActions set) { return set.Get(); }
        public void SetCallbacks(ICharacterActionMapActions instance)
        {
            if (m_Wrapper.m_CharacterActionMapActionsCallbackInterface != null)
            {
                @Walk.started -= m_Wrapper.m_CharacterActionMapActionsCallbackInterface.OnWalk;
                @Walk.performed -= m_Wrapper.m_CharacterActionMapActionsCallbackInterface.OnWalk;
                @Walk.canceled -= m_Wrapper.m_CharacterActionMapActionsCallbackInterface.OnWalk;
                @Jump.started -= m_Wrapper.m_CharacterActionMapActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_CharacterActionMapActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_CharacterActionMapActionsCallbackInterface.OnJump;
            }
            m_Wrapper.m_CharacterActionMapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Walk.started += instance.OnWalk;
                @Walk.performed += instance.OnWalk;
                @Walk.canceled += instance.OnWalk;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
            }
        }
    }
    public CharacterActionMapActions @CharacterActionMap => new CharacterActionMapActions(this);
    public interface ICharacterActionMapActions
    {
        void OnWalk(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
    }
}
