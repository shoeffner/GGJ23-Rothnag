//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Input/RothnagInputActionAsset.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @RothnagInputActionAsset : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @RothnagInputActionAsset()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""RothnagInputActionAsset"",
    ""maps"": [
        {
            ""name"": ""CharacterActionMap"",
            ""id"": ""15c3f0da-870d-486f-bd1e-a217cec8b51e"",
            ""actions"": [
                {
                    ""name"": ""Walk"",
                    ""type"": ""PassThrough"",
                    ""id"": ""3c270217-aa5a-4519-817b-5468a0bee1a5"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""6cb64422-4ed2-40fc-9ec0-f49c55391b50"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CheatEventProgress"",
                    ""type"": ""Button"",
                    ""id"": ""955fbae2-ebe7-4a57-9cee-f383e01d585f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""c7987e82-c43c-4bd1-8599-fcb447aaf2b0"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""6f3598b0-a7c7-4103-9033-28062e4beded"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""1c010714-fb72-4dc3-8668-17dc8c56a072"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""3afd5886-7536-4b6f-820b-f89428016276"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Negative"",
                    ""id"": ""7d6c16f1-bd57-40d3-85a4-f88864ccfe07"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Positive"",
                    ""id"": ""9d193476-07b1-4a4c-995b-af34108b4135"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""cb772620-3b9b-46a3-8b62-4178eb3db1f2"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""a5328abf-efaf-4a06-82e2-f4d0f3a44c35"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""51824dee-3fb1-43cb-b663-acee71f5afcb"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""fdccf354-4bf1-47ac-81ba-9b782ab6aa0a"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e5d63a94-bf1c-4755-9cae-2dac68ffa287"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c2c36d1b-6d51-4408-8692-f26db46a1923"",
                    ""path"": ""<Keyboard>/k"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CheatEventProgress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""CharacterOverviewMap"",
            ""id"": ""fd4dd3b4-af7f-4034-b67e-bb5b61a9037d"",
            ""actions"": [
                {
                    ""name"": ""MapLeftRight"",
                    ""type"": ""PassThrough"",
                    ""id"": ""b12e82c4-6238-4ac2-a2f2-5c60e2eff931"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MapUpDown"",
                    ""type"": ""PassThrough"",
                    ""id"": ""55bb2560-981c-491e-b430-d01e673ffcc1"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""da0540d0-b38d-49e7-a10d-24d848bcb23b"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MapLeftRight"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""33f073b5-ea49-4ed8-b7d3-5855206b4714"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MapLeftRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""ff99627c-9188-4265-b9eb-8053e687a431"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MapLeftRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""4eaa735b-c8c1-407c-b572-d4c4f7e81ece"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MapLeftRight"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Negative"",
                    ""id"": ""f72a3e78-53d3-4a51-a62b-09f3de9d418b"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MapLeftRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Positive"",
                    ""id"": ""7d9fce11-3aa0-454b-92e4-48109933edc3"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MapLeftRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""9e7cf6ac-0282-4767-b335-cf6e7c73c861"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MapUpDown"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""fad3b0e6-18dd-412c-808c-a59de0b6f221"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MapUpDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""2263213e-2173-457d-96c9-918f1e05ab3d"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MapUpDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""19ce4444-328d-4c13-ac8b-af7b118e42a5"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MapUpDown"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Negative"",
                    ""id"": ""66b5e1b2-974d-4b9a-9da6-995a12ad17f2"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MapUpDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Positive"",
                    ""id"": ""0fb3f617-634f-4d14-90be-33e646323494"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MapUpDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""2d6fff9e-8569-4373-83c1-344be6d67af9"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MapLeftRight"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""c64abc56-5b8d-4786-8e36-c722391bc8e0"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MapLeftRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""932a3dc5-9015-4d47-b0af-f753674c0c5e"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MapLeftRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""9def3a16-1d1a-45cc-9389-3dce88d9afd8"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MapUpDown"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""2ead301d-c953-4f2f-b737-0d8a332590fd"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MapUpDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""6731369b-77c1-473f-ae81-27413bb96d20"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MapUpDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""BucketMiniGame"",
            ""id"": ""993f3cec-bb3c-4b38-aad8-87b8a7e7b95e"",
            ""actions"": [
                {
                    ""name"": ""Crank"",
                    ""type"": ""Button"",
                    ""id"": ""0c8a9c08-b8ab-4138-9473-1dcb641660b0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2e92f17f-6b81-4cd4-898e-ac42063da9c0"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Crank"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ad119bc4-f66d-4ee7-80cf-ee2dbf888b79"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Crank"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // CharacterActionMap
        m_CharacterActionMap = asset.FindActionMap("CharacterActionMap", throwIfNotFound: true);
        m_CharacterActionMap_Walk = m_CharacterActionMap.FindAction("Walk", throwIfNotFound: true);
        m_CharacterActionMap_Jump = m_CharacterActionMap.FindAction("Jump", throwIfNotFound: true);
        m_CharacterActionMap_CheatEventProgress = m_CharacterActionMap.FindAction("CheatEventProgress", throwIfNotFound: true);
        // CharacterOverviewMap
        m_CharacterOverviewMap = asset.FindActionMap("CharacterOverviewMap", throwIfNotFound: true);
        m_CharacterOverviewMap_MapLeftRight = m_CharacterOverviewMap.FindAction("MapLeftRight", throwIfNotFound: true);
        m_CharacterOverviewMap_MapUpDown = m_CharacterOverviewMap.FindAction("MapUpDown", throwIfNotFound: true);
        // BucketMiniGame
        m_BucketMiniGame = asset.FindActionMap("BucketMiniGame", throwIfNotFound: true);
        m_BucketMiniGame_Crank = m_BucketMiniGame.FindAction("Crank", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // CharacterActionMap
    private readonly InputActionMap m_CharacterActionMap;
    private ICharacterActionMapActions m_CharacterActionMapActionsCallbackInterface;
    private readonly InputAction m_CharacterActionMap_Walk;
    private readonly InputAction m_CharacterActionMap_Jump;
    private readonly InputAction m_CharacterActionMap_CheatEventProgress;
    public struct CharacterActionMapActions
    {
        private @RothnagInputActionAsset m_Wrapper;
        public CharacterActionMapActions(@RothnagInputActionAsset wrapper) { m_Wrapper = wrapper; }
        public InputAction @Walk => m_Wrapper.m_CharacterActionMap_Walk;
        public InputAction @Jump => m_Wrapper.m_CharacterActionMap_Jump;
        public InputAction @CheatEventProgress => m_Wrapper.m_CharacterActionMap_CheatEventProgress;
        public InputActionMap Get() { return m_Wrapper.m_CharacterActionMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CharacterActionMapActions set) { return set.Get(); }
        public void SetCallbacks(ICharacterActionMapActions instance)
        {
            if (m_Wrapper.m_CharacterActionMapActionsCallbackInterface != null)
            {
                @Walk.started -= m_Wrapper.m_CharacterActionMapActionsCallbackInterface.OnWalk;
                @Walk.performed -= m_Wrapper.m_CharacterActionMapActionsCallbackInterface.OnWalk;
                @Walk.canceled -= m_Wrapper.m_CharacterActionMapActionsCallbackInterface.OnWalk;
                @Jump.started -= m_Wrapper.m_CharacterActionMapActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_CharacterActionMapActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_CharacterActionMapActionsCallbackInterface.OnJump;
                @CheatEventProgress.started -= m_Wrapper.m_CharacterActionMapActionsCallbackInterface.OnCheatEventProgress;
                @CheatEventProgress.performed -= m_Wrapper.m_CharacterActionMapActionsCallbackInterface.OnCheatEventProgress;
                @CheatEventProgress.canceled -= m_Wrapper.m_CharacterActionMapActionsCallbackInterface.OnCheatEventProgress;
            }
            m_Wrapper.m_CharacterActionMapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Walk.started += instance.OnWalk;
                @Walk.performed += instance.OnWalk;
                @Walk.canceled += instance.OnWalk;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @CheatEventProgress.started += instance.OnCheatEventProgress;
                @CheatEventProgress.performed += instance.OnCheatEventProgress;
                @CheatEventProgress.canceled += instance.OnCheatEventProgress;
            }
        }
    }
    public CharacterActionMapActions @CharacterActionMap => new CharacterActionMapActions(this);

    // CharacterOverviewMap
    private readonly InputActionMap m_CharacterOverviewMap;
    private ICharacterOverviewMapActions m_CharacterOverviewMapActionsCallbackInterface;
    private readonly InputAction m_CharacterOverviewMap_MapLeftRight;
    private readonly InputAction m_CharacterOverviewMap_MapUpDown;
    public struct CharacterOverviewMapActions
    {
        private @RothnagInputActionAsset m_Wrapper;
        public CharacterOverviewMapActions(@RothnagInputActionAsset wrapper) { m_Wrapper = wrapper; }
        public InputAction @MapLeftRight => m_Wrapper.m_CharacterOverviewMap_MapLeftRight;
        public InputAction @MapUpDown => m_Wrapper.m_CharacterOverviewMap_MapUpDown;
        public InputActionMap Get() { return m_Wrapper.m_CharacterOverviewMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CharacterOverviewMapActions set) { return set.Get(); }
        public void SetCallbacks(ICharacterOverviewMapActions instance)
        {
            if (m_Wrapper.m_CharacterOverviewMapActionsCallbackInterface != null)
            {
                @MapLeftRight.started -= m_Wrapper.m_CharacterOverviewMapActionsCallbackInterface.OnMapLeftRight;
                @MapLeftRight.performed -= m_Wrapper.m_CharacterOverviewMapActionsCallbackInterface.OnMapLeftRight;
                @MapLeftRight.canceled -= m_Wrapper.m_CharacterOverviewMapActionsCallbackInterface.OnMapLeftRight;
                @MapUpDown.started -= m_Wrapper.m_CharacterOverviewMapActionsCallbackInterface.OnMapUpDown;
                @MapUpDown.performed -= m_Wrapper.m_CharacterOverviewMapActionsCallbackInterface.OnMapUpDown;
                @MapUpDown.canceled -= m_Wrapper.m_CharacterOverviewMapActionsCallbackInterface.OnMapUpDown;
            }
            m_Wrapper.m_CharacterOverviewMapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MapLeftRight.started += instance.OnMapLeftRight;
                @MapLeftRight.performed += instance.OnMapLeftRight;
                @MapLeftRight.canceled += instance.OnMapLeftRight;
                @MapUpDown.started += instance.OnMapUpDown;
                @MapUpDown.performed += instance.OnMapUpDown;
                @MapUpDown.canceled += instance.OnMapUpDown;
            }
        }
    }
    public CharacterOverviewMapActions @CharacterOverviewMap => new CharacterOverviewMapActions(this);

    // BucketMiniGame
    private readonly InputActionMap m_BucketMiniGame;
    private IBucketMiniGameActions m_BucketMiniGameActionsCallbackInterface;
    private readonly InputAction m_BucketMiniGame_Crank;
    public struct BucketMiniGameActions
    {
        private @RothnagInputActionAsset m_Wrapper;
        public BucketMiniGameActions(@RothnagInputActionAsset wrapper) { m_Wrapper = wrapper; }
        public InputAction @Crank => m_Wrapper.m_BucketMiniGame_Crank;
        public InputActionMap Get() { return m_Wrapper.m_BucketMiniGame; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BucketMiniGameActions set) { return set.Get(); }
        public void SetCallbacks(IBucketMiniGameActions instance)
        {
            if (m_Wrapper.m_BucketMiniGameActionsCallbackInterface != null)
            {
                @Crank.started -= m_Wrapper.m_BucketMiniGameActionsCallbackInterface.OnCrank;
                @Crank.performed -= m_Wrapper.m_BucketMiniGameActionsCallbackInterface.OnCrank;
                @Crank.canceled -= m_Wrapper.m_BucketMiniGameActionsCallbackInterface.OnCrank;
            }
            m_Wrapper.m_BucketMiniGameActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Crank.started += instance.OnCrank;
                @Crank.performed += instance.OnCrank;
                @Crank.canceled += instance.OnCrank;
            }
        }
    }
    public BucketMiniGameActions @BucketMiniGame => new BucketMiniGameActions(this);
    public interface ICharacterActionMapActions
    {
        void OnWalk(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnCheatEventProgress(InputAction.CallbackContext context);
    }
    public interface ICharacterOverviewMapActions
    {
        void OnMapLeftRight(InputAction.CallbackContext context);
        void OnMapUpDown(InputAction.CallbackContext context);
    }
    public interface IBucketMiniGameActions
    {
        void OnCrank(InputAction.CallbackContext context);
    }
}
